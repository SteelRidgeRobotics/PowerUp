// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<DriveTrain> Robot::driveTrain;
std::shared_ptr<MotionProfile> Robot::motionProfile;
std::shared_ptr<Intake> Robot::intake;
std::shared_ptr<Arm> Robot::arm;
std::shared_ptr<Climber> Robot::climber;
std::unique_ptr<OI> Robot::oi;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    driveTrain.reset(new DriveTrain());
    motionProfile.reset(new MotionProfile());
    intake.reset(new Intake());
    arm.reset(new Arm());
    climber.reset(new Climber());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());

	// Add commands to Autonomous Sendable Chooser
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

	chooser.AddObject("PositionOneLeft", "PositionOneLeft");
	chooser.AddObject("PositionOneRight", "PositionOneRight");
	chooser.AddObject("PositionTwoLeft", "PositionTwoLeft");
	chooser.AddObject("PositionTwoRight", "PositionTwoRight");
	chooser.AddObject("PositionThreeLeft", "PositionThreeLeft");
	chooser.AddObject("PositionThreeRight", "PositionThreeRight");
	//chooser.AddObject("PositionOneLeftPath", new PositionOneLeftPath());
	//chooser.AddObject("PositionOneRightPath", new PositionOneRightPath());
	//chooser.AddObject("PositionTwoLeftPath", new PositionTwoLeftPath());
	//chooser.AddObject("PositionTwoRightPath", new PositionTwoRightPath());
	//chooser.AddObject("PositionThreeLeftPath", new PositionThreeLeftPath());
	//chooser.AddObject("PositionThreeRightPath", new PositionThreeRightPath());
	chooser.AddObject("DoNothingPath", "DoNothingPath");
	chooser.AddObject("DriveWithEncoders", "DriveWithEncoders");
	//chooser.AddObject("DriveForward", new DriveForward());
	//chooser.AddObject("WaitUntilReady", new WaitUntilReady());

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	frc::SmartDashboard::PutData("Auto Modes", &chooser);

		cs::UsbCamera camera0 = frc::CameraServer::GetInstance()->StartAutomaticCapture(0);
		camera0.SetResolution(1280, 720);
		camera0.SetFPS(15);
}

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){

}

void Robot::DisabledPeriodic() {
	frc::Scheduler::GetInstance()->Run();
	gameData = frc::DriverStation::GetInstance().GetGameSpecificMessage();
}

void Robot::AutonomousInit() {
	std::string selectedAuto;
	selectedAuto = chooser.GetSelected();
	std::cout << "GameData:" << gameData << std::endl;
	//switch(selectedAuto){
	if(selectedAuto ==  "PositionOneLeft"){
		if(gameData.length() == 3){
			if(gameData.at(0) == 'L') {
				autonomousCommand = new PositionOneLeft();
			}
			else
				autonomousCommand = new PositionOneRight();
		}
		else
			autonomousCommand = new DriveWithEncoders();
	}

	//case "PositionTwoLeft":
	if(selectedAuto ==  "PositionTwoLeft"){
		if(gameData.length() == 3){
			if(gameData.at(0) == 'L'){
				autonomousCommand = new PositionTwoLeft();
			}
			else
				autonomousCommand = new PositionTwoRight();
		}
		else
			autonomousCommand = new DriveWithEncoders();
	}

	//case "PositionThreeLeft":
	if(selectedAuto ==  "PositionThreeLeft"){
		if(gameData.length() == 3){
			if(gameData.at(0) == 'L'){
				autonomousCommand = new PositionThreeLeft();
			}
			else
				autonomousCommand = new PositionThreeRight();
		}
		else
			autonomousCommand = new DriveWithEncoders();
	}


	//case "DoNothingPath":
	if(selectedAuto ==  "DoNothingPath"){
		autonomousCommand = new DoNothingPath();
	}

	//case "DriveWithEncoders":
	if(selectedAuto == "DriveWithEncoders"){
		autonomousCommand = new DriveWithEncoders();
	}




	//autonomousCommand = chooser.GetSelected();
	if (autonomousCommand != nullptr)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	frc::Scheduler::GetInstance()->Run();

	/*Put data to the smart dashboard*/

		frc::SmartDashboard::PutNumber("L_CLError", RobotMap::driveTrainLeftFront->GetClosedLoopError(0));
		frc::SmartDashboard::PutNumber("R_CLError", RobotMap::driveTrainRightFront->GetClosedLoopError(0));
		frc::SmartDashboard::PutNumber("L_MPError", RobotMap::driveTrainLeftFront->GetClosedLoopError(1));
		frc::SmartDashboard::PutNumber("R_MPError", RobotMap::driveTrainRightFront->GetClosedLoopError(1));
		frc::SmartDashboard::PutNumber("L_Pos", RobotMap::driveTrainLeftFront->GetSelectedSensorPosition(0));
		frc::SmartDashboard::PutNumber("R_Pos", RobotMap::driveTrainRightFront->GetSelectedSensorPosition(0));
		frc::SmartDashboard::PutNumber("L_Speed", RobotMap::driveTrainLeftFront->GetSelectedSensorVelocity(0));
		frc::SmartDashboard::PutNumber("R_Speed", RobotMap::driveTrainRightFront->GetSelectedSensorVelocity(0));
		frc::SmartDashboard::PutNumber("Arm_V", RobotMap::armArmPositionSensor->Get());
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand != nullptr)
		autonomousCommand->Cancel();
}

void Robot::TeleopPeriodic() {
	frc::Scheduler::GetInstance()->Run();

	/*Put data to the smart dashboard*/

	frc::SmartDashboard::PutNumber("L_CLError", RobotMap::driveTrainLeftFront->GetClosedLoopError(0));
	frc::SmartDashboard::PutNumber("R_CLError", RobotMap::driveTrainRightFront->GetClosedLoopError(0));
	frc::SmartDashboard::PutNumber("L_MPError", RobotMap::driveTrainLeftFront->GetClosedLoopError(1));
	frc::SmartDashboard::PutNumber("R_MPError", RobotMap::driveTrainRightFront->GetClosedLoopError(1));
	frc::SmartDashboard::PutNumber("L_Pos", RobotMap::driveTrainLeftFront->GetSelectedSensorPosition(0));
	frc::SmartDashboard::PutNumber("R_Pos", RobotMap::driveTrainRightFront->GetSelectedSensorPosition(0));
	frc::SmartDashboard::PutNumber("L_Speed", RobotMap::driveTrainLeftFront->GetSelectedSensorVelocity(0));
	frc::SmartDashboard::PutNumber("R_Speed", RobotMap::driveTrainRightFront->GetSelectedSensorVelocity(0));
	frc::SmartDashboard::PutNumber("Arm_V", RobotMap::armArmPositionSensor->Get());

}

START_ROBOT_CLASS(Robot);

