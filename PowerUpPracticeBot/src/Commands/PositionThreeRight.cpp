// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "PositionThreeRight.h"
#include "Commands/ArmPositionSwitch.h"
#include "Commands/PositionThreeRightPath.h"
#include "Commands/DoNothingPath.h"
#include "Commands/CubeDeployAuto.h"
#include "Commands/FiveFeetPath.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

PositionThreeRight::PositionThreeRight() {
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
     // Add Commands here:
    // e.g. AddSequential(new Command1());
    //      AddSequential(new Command2());
    // these will run in order.

    // To run multiple commands at the same time,
    // use AddParallel()
    // e.g. AddParallel(new Command1());
    //      AddSequential(new Command2());
    // Command1 and Command2 will run in parallel.

    // A command group will require all of the subsystems that each member
    // would require.
    // e.g. if Command1 requires chassis, and Command2 requires arm,
    // a CommandGroup containing them would require both the chassis and the
    // arm.
              // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
/*
	std::string gameData;
	char switchSide;

	while(gameData.length() < 3){
	gameData = frc::DriverStation::GetInstance().GetGameSpecificMessage();
	}

	switchSide = gameData.at(0);

	if(gameData.length() > 0){
			if(switchSide == 'L'){
				std::cout << "SWITCH SIDE: " << switchSide << "\n";

*/
                AddSequential(new ArmPositionSwitch());
                AddSequential(new DoNothingPath());
                AddSequential(new WaitCommand(2.0));
                AddSequential(new PositionThreeRightPath());
                AddSequential(new WaitCommand(1.0));
                AddSequential(new CubeDeployAuto(1.0));
/*
			}


			else {
				std::cout << "SWITCH SIDE: " << switchSide << "\n";
                AddSequential(new ArmPositionSwitch());
                AddSequential(new DoNothingPath());
                AddSequential(new WaitCommand(2.0));
				AddSequential(new FiveFeetPath());
			}

	}
	else {
		std::cout << "GAME DATA NOT RECEIVED!" << std::endl;
	}
	*/




              // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
 }
