// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
#include "ctre/Phoenix.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "WPILib.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<WPI_TalonSRX> RobotMap::driveTrainLeftFront;
std::shared_ptr<WPI_TalonSRX> RobotMap::driveTrainLeftBack;
std::shared_ptr<WPI_TalonSRX> RobotMap::driveTrainRightBack;
std::shared_ptr<WPI_TalonSRX> RobotMap::driveTrainRightFront;
std::shared_ptr<frc::SpeedController> RobotMap::intakeLeftRoller;
std::shared_ptr<frc::SpeedController> RobotMap::intakeRightRoller;
std::shared_ptr<frc::DigitalOutput> RobotMap::intakeLightOn;
std::shared_ptr<frc::DigitalInput> RobotMap::intakeRollerStopSensor;
std::shared_ptr<frc::SpeedController> RobotMap::armArmActuator;
std::shared_ptr<frc::AnalogPotentiometer> RobotMap::armArmPositionSensor;
std::shared_ptr<frc::Solenoid> RobotMap::climberClimberRelease;
std::shared_ptr<frc::Compressor> RobotMap::climberClimberCompressor;
std::shared_ptr<frc::SpeedController> RobotMap::climberClimberPullMotor;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    frc::LiveWindow *lw = frc::LiveWindow::GetInstance();

    driveTrainLeftFront.reset(new WPI_TalonSRX(0));
    
    
    driveTrainLeftBack.reset(new WPI_TalonSRX(1));
    
    
    driveTrainRightBack.reset(new WPI_TalonSRX(3));
    
    
    driveTrainRightFront.reset(new WPI_TalonSRX(2));
    
    
    intakeLeftRoller.reset(new frc::VictorSP(0));
    lw->AddActuator("Intake", "LeftRoller", std::static_pointer_cast<frc::VictorSP>(intakeLeftRoller));
    
    intakeRightRoller.reset(new frc::VictorSP(1));
    lw->AddActuator("Intake", "RightRoller", std::static_pointer_cast<frc::VictorSP>(intakeRightRoller));
    
    intakeLightOn.reset(new frc::DigitalOutput(1));
    lw->AddActuator("Intake", "LightOn", intakeLightOn);
    
    intakeRollerStopSensor.reset(new frc::DigitalInput(0));
    lw->AddSensor("Intake", "RollerStopSensor", intakeRollerStopSensor);
    
    armArmActuator.reset(new frc::VictorSP(2));
    lw->AddActuator("Arm", "ArmActuator", std::static_pointer_cast<frc::VictorSP>(armArmActuator));
    
    armArmPositionSensor.reset(new frc::AnalogPotentiometer(0, 270.0, 0.0));
    lw->AddSensor("Arm", "ArmPositionSensor", armArmPositionSensor);
    
    climberClimberRelease.reset(new frc::Solenoid(0, 0));
    lw->AddActuator("Climber", "ClimberRelease", climberClimberRelease);
    
    climberClimberCompressor.reset(new frc::Compressor(0));
    lw->AddActuator("Climber", "ClimberCompressor", climberClimberCompressor);
    
    climberClimberPullMotor.reset(new frc::VictorSP(3));
    lw->AddActuator("Climber", "ClimberPullMotor", std::static_pointer_cast<frc::VictorSP>(climberClimberPullMotor));
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
