// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "ChassisSub.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/driveWithJoy.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

ChassisSub::ChassisSub() : Subsystem("ChassisSub") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    frontLeft = RobotMap::chassisSubfrontLeft;
    rearLeft = RobotMap::chassisSubrearLeft;
    frontRight = RobotMap::chassisSubfrontRight;
    rearRight = RobotMap::chassisSubrearRight;
    driveTrian = RobotMap::chassisSubDriveTrian;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void ChassisSub::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new driveWithJoy());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void ChassisSub::chassisDrive(double left, double right)
{
	driveTrian->TankDrive(left, right);
}
void ChassisSub::chassisDrive(std::shared_ptr<Joystick>chassisJoysticks){

	if(chassisJoysticks->GetRawButton(6)==1){
		driveTrian->TankDrive(0.6*chassisJoysticks->GetRawAxis(5), 0.6*chassisJoysticks->GetRawAxis(1));
	}
	else if(chassisJoysticks->GetRawAxis(2)==1){
		driveTrian->TankDrive(-.5*chassisJoysticks->GetRawAxis(1), -.5*chassisJoysticks->GetRawAxis(5));
	}
	else{
		driveTrian->TankDrive(-1*chassisJoysticks->GetRawAxis(1), -1*chassisJoysticks->GetRawAxis(5));
//	driveTrian->TankDrive(chassisJoysticks->GetRawAxis(1), chassisJoysticks->GetRawAxis(5));

}
}
void ChassisSub::chassisDrive(double left, double right){
	driveTrian->TankDrive(left, right);
}
//void ChassisSub::drivestop(){

//	driveTrian->TankDrive(0.0, 0.0);

//}
// Put methods for controlling this subsystem
// here. Call these from Commands.

